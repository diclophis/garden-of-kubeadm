#!/usr/bin/env ruby

Haconiwa.define do |config|
  # The container name and container's hostname:
  config.name = "new-haconiwa001"

  # The first process when invoking haconiwa run:
  # config.init_command = "/sbin/init"

  # If your first process is a daemon, please explicitly daemonize by:
  # config.daemonize!

  # If you want to emit command's stdout/err to files, uncomment here
  # This is active only on daemon mode:
  # config.command.set_stdout(file: "/var/log/haconiwa-container.stdout")
  # config.command.set_stderr(file: "/var/log/haconiwa-container.stderr")

  # The rootfs location on your host OS
  # Pathname class is useful:
  root = Pathname.new("/var/tmp/deb001")
  config.chroot_to root

  # The bootstrap process...
  # Choose lxc, debootstrap, git-clone, shell or mruby:
  config.bootstrap do |b|
    b.strategy = "lxc"
    b.os_type = "ubuntu"
  end

  config.provision do |p|
    p.run_shell "env"
    #p.run_shell "apt-get autoclean"
    #p.run_shell "apt-get -o Debug::Acquire::http=true update"
    p.run_shell "DEBIAN_FRONTEND=nonintaractive apt-get install -y curl ca-certificates apt-transport-https"
    p.run_shell "curl -s -k https://packages.cloud.google.com/apt/doc/apt-key.gpg > /var/tmp/apt-key.gpg"
    p.run_shell "apt-key add /var/tmp/apt-key.gpg"
    p.run_shell "echo deb http://apt.kubernetes.io/ kubernetes-xenial main | tee /etc/apt/sources.list.d/kubernetes.list"
    p.run_shell "apt-get -y -o Debug::Acquire::http=true update"
    p.run_shell "DEBIAN_FRONTEND=nonintaractive apt-get install -y linux-image-4.4.0-57-generic docker.io kubelet kubeadm kubectl kubernetes-cni"
    p.run_shell "test -e /dev/xconsole || mknod -m 640 /dev/xconsole c 1 3"
    p.run_shell "chown syslog:adm /dev/xconsole"
    p.run_shell "kubeadm reset"
  end

  # Check that the required binary is installed(lxc-create / debootstrap)

  # mount point configuration:
  config.add_mount_point "tmpfs", to: root.join("tmp"), fs: "tmpfs"
  config.add_mount_point "tmpfs", to: root.join("run"), fs: "tmpfs"

  config.add_mount_point "/sys", to: root.join("sys"), readonly: true

  #config.add_mount_point "devpts", to: root.join("dev", "pts"), fs: "devpts"

  # Share network etc files from host to contianer
  # You can reuse /etc/netns/${netnsname}/* files:
  
  #config.mount_network_etc(root, host_root: "/etc")
  config.network_mountpoint << MountPoint.new("/var/run/resolvconf/resolv.conf", to: "#{root}/etc/resolvconf/resolv.conf.d/tail")

  #config.network_mountpoint << MountPoint.new("#{from}/hosts",       to: "#{root}/etc/hosts")

  # more mount point configuration example:
  # config.add_mount_point root, to: root, readonly: true
  # config.add_mount_point "/lib64", to: root.join("lib64"), readonly: true

  # Re-mount specific filesystems under new container namespace
  # These are recommended when namespaces such as pid and net are unshared:
  
  config.mount_independent "procfs"
  #config.mount_independent "sysfs"
  config.mount_independent "devtmpfs"
  config.mount_independent "devpts"
  config.mount_independent "shm"

  # The namespaces to unshare:
  config.namespace.unshare "mount"
  config.namespace.unshare "ipc"
  config.namespace.unshare "uts"
  config.namespace.unshare "pid"

  #config.namespace.unshare "net"
  #config.namespace.unshare ::Namespace::CLONE_NEWNS

  #    "ipc"    => ::Namespace::CLONE_NEWIPC,
  #    "net"    => ::Namespace::CLONE_NEWNET,
  #    "mount"  => ::Namespace::CLONE_NEWNS,
  #    "pid"    => ::Namespace::CLONE_NEWPID,
  #    "user"   => ::Namespace::CLONE_NEWUSER,
  #    "uts"    => ::Namespace::CLONE_NEWUTS,

  # You can use existing namespace via symlink file. e.g.:
  # config.namespace.enter "net", via: "/var/run/netns/sample001"

  # The cgroup configuration example:
  # config.cgroup["cpu.cfs_period_us"] = 100000
  # config.cgroup["cpu.cfs_quota_us"]  =  30000

  config.environ = {
    "CONTAINER" => "docker"
  }

  # The linux kernel capability:
  # Haconiwa has default capability whitelist and applies it when there's no config
  # If you want to use customized blacklist, first uncomment below:
  config.capabilities.reset_to_privileged!

  # Then declare:
  # config.capabilities.allow :all

  # config.capabilities.drop "cap_sys_time"
  # config.capabilities.drop "cap_kill"

  # When you use whitelist capability, set:
  #GOOD??
  config.capabilities.allow "cap_sys_admin"
  config.capabilities.allow "cap_kill"
  config.capabilities.allow "cap_fsetid"
  config.capabilities.allow "cap_chown"
  config.capabilities.allow "cap_sys_time"
  config.capabilities.allow "cap_sys_module"
  config.capabilities.allow "cap_sys_resource"
  config.capabilities.allow "cap_net_admin"
  config.capabilities.allow "cap_net_raw"
  config.capabilities.allow "cap_net_bind_service"
  config.capabilities.allow "cap_sys_chroot"
  config.capabilities.allow "cap_sys_nice"
  config.capabilities.allow "cap_net_broadcast"
  config.capabilities.allow "cap_setfcap"
  config.capabilities.allow "cap_setgid"
  config.capabilities.allow "cap_setuid"
  config.capabilities.allow "cap_fowner"
  config.capabilities.allow "cap_lease"
  config.capabilities.allow "cap_mknod"
  config.capabilities.allow "cap_audit_write"
  config.capabilities.allow "cap_sys_nice"
  config.capabilities.allow "cap_ipc_lock"
  config.capabilities.allow "cap_ipc_owner"
  config.capabilities.allow "cap_net_raw"
  config.capabilities.allow "cap_setpcap"
  config.capabilities.allow "cap_sys_ptrace"
  config.capabilities.allow "cap_sys_rawio"
  config.capabilities.allow "cap_syslog"
  config.capabilities.allow "cap_dac_override"
  config.capabilities.allow "cap_dac_read_search"
  config.capabilities.allow "cap_audit_write"
  config.capabilities.allow "cap_audit_control"
  config.capabilities.allow "cap_mac_override"
  config.capabilities.allow "cap_mac_admin"
  config.capabilities.allow "cap_sys_boot"


  # Specify uid/gid who owns container process:
  # config.uid = "vagrant"
  # config.gid = "vagrant"

  # The resource limit:
  # config.resource.set_limit(:CPU, 10 * 60)
  # config.resource.set_limit(:NOFILE, 30)

  # More examples and informations, please visit:
  # https://github.com/haconiwa/haconiwa/tree/master/sample
  # Enjoy your own container!
end
